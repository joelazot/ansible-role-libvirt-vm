---
- include_tasks: gen-cloudinit-iso.yml
  

- include_tasks: autodetect.yml
  # We don't need to know the engine and emulator if we're not creating any new
  # VMs.
  when: >-
    (libvirt_vms | selectattr('state', 'defined')
       | selectattr('state', 'equalto', 'absent') | list) != libvirt_vms

- include_tasks: volumes.yml
  vars:
    volumes: "{{ vm.volumes | default([], true) }}"
  with_items: "{{ libvirt_vms }}"
  loop_control:
    loop_var: vm
  when: (vm.state | default('present', true)) == 'present'

- include_tasks: vm.yml
  vars:
    console_log_enabled: "{{ vm.console_log_enabled | default(false) }}"
    console_log_path: "{{ vm.console_log_path | default(libvirt_vm_default_console_log_dir + '/' +  vm.name + '-console.log', true) }}"
    machine_default: "{{ none if libvirt_vm_engine == 'kvm' else 'pc-1.0' }}"
    machine: "{{ vm.machine | default(machine_default, true) }}"
    cpu_mode_default: "{{ 'host-passthrough' if libvirt_vm_engine == 'kvm' else 'host-model' }}"
    cpu_mode: "{{ vm.cpu_mode | default(cpu_mode_default, true) }}"
    volumes: "{{ vm.volumes | default([], true) }}"
    interfaces: "{{ vm.interfaces | default([], true) }}"
    start: "{{ vm.start | default(true) }}"
    autostart: "{{ vm.autostart | default(true) }}"
  with_items: "{{ libvirt_vms }}"
  loop_control:
    loop_var: vm
  when: (vm.state | default('present', true)) == 'present'

- include_tasks: cloudinit.yml
  with_items: "{{ libvirt_vms }}"
  loop_control:
    loop_var: vm
  when: (vm.use_cloudinit == 'True')

- include_tasks: destroy-volumes.yml
  vars:
    volumes: "{{ vm.volumes | default([], true) }}"
  with_items: "{{ libvirt_vms }}"
  loop_control:
    loop_var: vm
  when: (vm.state | default('present', true)) == 'absent'

- include_tasks: destroy-vm.yml
  with_items: "{{ libvirt_vms }}"
  loop_control:
    loop_var: vm
  when: (vm.state | default('present', true)) == 'absent'
